"use strict";var webglFilter=function(){var e,t,r,o,a,i,n,c,u,l,_,d,f,v,s,A,R,E,T,x,F,m,b,h,p,g,U,C,L,D,w,B,P,S,y,M,X,O,I,G,V,N,Y,H,W,k,z,j,q=!1,K=!1,J=!1,Q=["attribute vec2 a_texCoord;","attribute vec2 a_position;","","varying vec2 v_texCoord;","","void main() {","   // transform coordinates to regular coordinates","   gl_Position = vec4(a_position,0.0,1.0);"," ","   // pass the texCoord to the fragment shader","   v_texCoord = a_texCoord;","}"].join("\n"),Z=["attribute vec2 a_texCoord;","attribute vec2 a_position;","","varying vec2 v_texCoord;","","void main() {","   // transform coordinates to regular coordinates","   gl_Position = vec4(a_position,0.0,1.0);"," ","   // pass the texCoord to the fragment shader","   v_texCoord = a_texCoord;","}"].join("\n"),$=["attribute vec2 a_texCoord_draw;","attribute vec2 a_position_draw;","attribute float a_patchChoice_draw;","","uniform vec2 u_resolutiondraw;","","varying vec2 v_texCoord;","varying float v_select;","","void main() {","   // convert the rectangle from pixels to 0.0 to 1.0","   vec2 zeroToOne = a_position_draw / u_resolutiondraw;","","   // convert from 0->1 to 0->2","   vec2 zeroToTwo = zeroToOne * 2.0;","","   // convert from 0->2 to -1->+1 (clipspace)","   vec2 clipSpace = zeroToTwo - 1.0;","   ","   // transform coordinates to regular coordinates","   gl_Position = vec4(clipSpace * vec2(1.0, 1.0), 0, 1);","","   // pass the texCoord to the fragment shader","   v_texCoord = a_texCoord_draw;","   ","   v_select = a_patchChoice_draw;","}"].join("\n"),ee=["precision mediump float;","","// our responses","uniform sampler2D u_responses;","","// the texCoords passed in from the vertex shader.","varying vec2 v_texCoord;","varying float v_select;","","const vec4 bit_shift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);","const vec4 bit_mask  = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);","","// packing code from here http://stackoverflow.com/questions/9882716/packing-float-into-vec4-how-does-this-code-work","void main() {","  vec4 colorSum = texture2D(u_responses, v_texCoord);","  float value = 0.0;","  if (v_select < 0.1) {","    value = colorSum[0];","  } else if (v_select > 0.9 && v_select < 1.1) {","    value = colorSum[1];","  } else if (v_select > 1.9 && v_select < 2.1) {","    value = colorSum[2];","  } else if (v_select > 2.9 && v_select < 3.1) {","    value = colorSum[3];","  } else {","    value = 1.0;","  }","  ","  vec4 res = fract(value * bit_shift);","  res -= res.xxyz * bit_mask;","  ","  //gl_FragColor = vec4(value, value, value, value);","  //gl_FragColor = vec4(1.0, value, 1.0, 1.0);","  gl_FragColor = res;","}"].join("\n");this.init=function(te,oe,ae,ie,ne,ce,ue){if(ce!=ue)return void alert("filter width and height must be same size!");if(ce%2==0||ue%2==0)return void alert("filters used in svm must be of odd dimensions!");P=oe,r=ce,o=ue,a=ie,i=ne,n=ae,f=Math.floor(n/4)+Math.ceil(n%4/4),c=a,u=i*f,m=a-r+1,b=i-r+1,h=b*n,C=Math.floor(n/4)+Math.ceil(n%4/4),L=a,D=i*C,w=a*i,B=new Float32Array(w*C*4);var le=[1/a,1/(i*f)];if(j=["precision mediump float;","","const vec2 u_onePixelPatches = vec2("+(1/a).toFixed(10)+","+(1/(i*f)).toFixed(10)+");","const vec2 u_onePixelFilters = vec2("+(1/r).toFixed(10)+","+(1/(o*f)).toFixed(10)+");","const float u_halffilterwidth = "+((r-1)/2).toFixed(1)+";","const float u_halffilterheight = "+((o-1)/2).toFixed(1)+";","","// our patches","uniform sampler2D u_patches;","// our filters","uniform sampler2D u_filters;","","// the texCoords passed in from the vertex shader.","varying vec2 v_texCoord;","varying vec2 v_texCoordFilters; // this should give us correct filter","","void main() {","  vec4 colorSum = vec4(0.0, 0.0, 0.0, 0.0);","  vec4 maxn = vec4(0.0, 0.0, 0.0, 0.0);","  vec4 minn = vec4(256.0, 256.0, 256.0, 256.0);","  vec4 scale = vec4(0.0, 0.0, 0.0, 0.0);","  vec4 patchValue = vec4(0.0, 0.0, 0.0, 0.0);","  vec4 filterValue = vec4(0.0, 0.0, 0.0, 0.0);","  vec4 filterTemp = vec4(0.0, 0.0, 0.0, 0.0);","  for (int w = 0;w < "+r+";w++) {","    for (int h = 0;h < "+o+";h++) {","      patchValue = texture2D(u_patches, v_texCoord + u_onePixelPatches * vec2(float(w)-u_halffilterwidth, float(h)-u_halffilterheight));","      filterValue = texture2D(u_filters, v_texCoordFilters + u_onePixelFilters * vec2(float(w)-u_halffilterwidth, float(h)-u_halffilterheight));","      maxn = max(patchValue, maxn);","      minn = min(patchValue, minn);","      colorSum += patchValue*filterValue;","      filterTemp += filterValue;","    } ","  }","  scale = maxn-minn;","  colorSum = (colorSum-(minn*filterTemp))/scale;","  // logistic transformation","  colorSum = 1.0/(1.0 + exp(- (colorSum) ));","  gl_FragColor = colorSum;","}"].join("\n"),z=["attribute vec2 a_texCoord;","attribute vec2 a_position;","","const vec2 u_resolution = vec2("+c.toFixed(1)+","+u.toFixed(1)+");","const float u_patchHeight = "+(1/f).toFixed(10)+";","const float u_filterHeight = "+(1/f).toFixed(10)+";","const vec2 u_midpoint = vec2(0.5 ,"+(1/(2*f)).toFixed(10)+");","","varying vec2 v_texCoord;","varying vec2 v_texCoordFilters;","","void main() {","   // convert the rectangle from pixels to 0.0 to 1.0","   vec2 zeroToOne = a_position / u_resolution;","","   // convert from 0->1 to 0->2","   vec2 zeroToTwo = zeroToOne * 2.0;","","   // convert from 0->2 to -1->+1 (clipspace)","   vec2 clipSpace = zeroToTwo - 1.0;","   ","   // transform coordinates to regular coordinates","   gl_Position = vec4(clipSpace * vec2(1.0, 1.0), 0, 1);"," ","   // pass the texCoord to the fragment shader","   v_texCoord = a_texCoord;","   ","   // set the filtertexture coordinate based on number filter to use","   v_texCoordFilters = u_midpoint + vec2(0.0, u_filterHeight * floor(a_texCoord[1]/u_patchHeight));","}"].join("\n"),"lbp"in te&&(W=["precision mediump float;","","uniform vec2 u_onePixelPatches;","","// our patches","uniform sampler2D u_patches;","","// the texCoords passed in from the vertex shader.","varying vec2 v_texCoord;","","void main() {","  vec4 topLeft = texture2D(u_patches, v_texCoord + vec2(-"+le[0].toFixed(5)+", -"+le[1].toFixed(5)+"));","  vec4 topMid = texture2D(u_patches, v_texCoord + vec2(0.0, -"+le[1].toFixed(5)+"));","  vec4 topRight = texture2D(u_patches, v_texCoord + vec2("+le[0].toFixed(5)+", -"+le[1].toFixed(5)+"));","  vec4 midLeft = texture2D(u_patches, v_texCoord + vec2(-"+le[0].toFixed(5)+", 0.0));","  vec4 midMid = texture2D(u_patches, v_texCoord);","  vec4 midRight = texture2D(u_patches, v_texCoord + vec2("+le[0].toFixed(5)+", 0.0));","  vec4 bottomLeft = texture2D(u_patches, v_texCoord + vec2(-"+le[0].toFixed(5)+", "+le[1].toFixed(5)+"));","  vec4 bottomMid = texture2D(u_patches, v_texCoord + vec2(0.0, "+le[1].toFixed(5)+"));","  vec4 bottomRight = texture2D(u_patches, v_texCoord + vec2("+le[0].toFixed(5)+", "+le[1].toFixed(5)+"));","  vec4 lbp = step(midMid, midRight)*1.0 + step(midMid, topRight)*2.0 + step(midMid, topMid)*4.0;","  lbp = lbp + step(midMid, topLeft)*8.0 + step(midMid, midLeft)*16.0 + step(midMid, bottomLeft)*32.0;","  lbp = lbp + step(midMid, bottomMid)*64.0 + step(midMid, bottomRight)*128.0;","  gl_FragColor = lbp;","}"].join("\n")),"sobel"in te&&(k=["precision mediump float;","","uniform vec2 u_onePixelPatches;","","// our patches","uniform sampler2D u_patches;","","// the texCoords passed in from the vertex shader.","varying vec2 v_texCoord;","","void main() {","  vec4 bottomLeft = texture2D(u_patches, v_texCoord + vec2(-"+le[0].toFixed(5)+", "+le[1].toFixed(5)+"));","  vec4 bottomRight = texture2D(u_patches, v_texCoord + vec2("+le[0].toFixed(5)+", "+le[1].toFixed(5)+"));","  vec4 topLeft = texture2D(u_patches, v_texCoord + vec2(-"+le[0].toFixed(5)+", -"+le[1].toFixed(5)+"));","  vec4 topRight = texture2D(u_patches, v_texCoord + vec2("+le[0].toFixed(5)+", -"+le[1].toFixed(5)+"));","  vec4 dx = (","    bottomLeft +","    (texture2D(u_patches, v_texCoord + vec2(-"+le[0].toFixed(5)+", 0.0))*vec4(2.0,2.0,2.0,2.0)) +","    topLeft -","    bottomRight -","    (texture2D(u_patches, v_texCoord + vec2("+le[0].toFixed(5)+", 0.0))*vec4(2.0,2.0,2.0,2.0)) -","    topRight)/4.0;","  vec4 dy = (","    bottomLeft +","    (texture2D(u_patches, v_texCoord + vec2(0.0, "+le[1].toFixed(5)+"))*vec4(2.0,2.0,2.0,2.0)) +","    bottomRight -","    topLeft -","    (texture2D(u_patches, v_texCoord + vec2(0.0, -"+le[1].toFixed(5)+"))*vec4(2.0,2.0,2.0,2.0)) -","    topRight)/4.0;","  vec4 gradient = sqrt((dx*dx) + (dy*dy));","  gl_FragColor = gradient;","}"].join("\n")),t=document.createElement("canvas"),t.setAttribute("width",a-r+1+"px"),t.setAttribute("height",(i-o+1)*n+"px"),t.setAttribute("id","renderCanvas"),t.setAttribute("style","display:none;"),document.body.appendChild(t),e=setupWebGL(t,{premultipliedAlpha:!1,preserveDrawingBuffer:!0,antialias:!1}),!e.getExtension("OES_texture_float"))return void alert("Your graphics card does not support floating point textures! :(");"raw"in te&&(re(te.raw,e.TEXTURE0),J=!0),"sobel"in te&&(re(te.sobel,e.TEXTURE4),K=!0),"lbp"in te&&(re(te.lbp,e.TEXTURE5),q=!0);for(var _e,de=[],fe=(r-1)/2,ve=0;ve<f;ve++)_e=ve*i,de=de.concat([fe,_e+fe,a-fe,_e+fe,fe,_e+i-fe]),de=de.concat([fe,_e+i-fe,a-fe,_e+fe,a-fe,_e+i-fe]);de=new Float32Array(de);for(var se=[],ve=0;ve<de.length;ve++)ve%2==0?se[ve]=de[ve]/c:se[ve]=de[ve]/u;if(se=new Float32Array(se),"lbp"in te||"sobel"in te){for(var _e,Ae=1-2/(i*f),Re=1-2/f+2/(i*f),Ee=[],ve=0;ve<f;ve++)_e=ve*(2/f),Ee=Ee.concat([-1,Ae-_e,1,Ae-_e,-1,Re-_e]),Ee=Ee.concat([-1,Re-_e,1,Ae-_e,1,Re-_e]);Ee=new Float32Array(Ee),Ae=1-1/(i*f),Re=1-1/f+1/(i*f);for(var Te=[],ve=0;ve<f;ve++)_e=ve*(1/f),Te=Te.concat([0,Ae-_e,1,Ae-_e,0,Re-_e]),Te=Te.concat([0,Re-_e,1,Ae-_e,1,Re-_e]);Te=new Float32Array(Te)}p=new Float32Array(12*n);for(var _e,xe,ve=0;ve<n;ve++)_e=ve*b,xe=12*ve,p[xe]=0,p[xe+1]=_e,p[xe+2]=m,p[xe+3]=_e,p[xe+4]=0,p[xe+5]=_e+b,p[xe+6]=0,p[xe+7]=_e+b,p[xe+8]=m,p[xe+9]=_e,p[xe+10]=m,p[xe+11]=_e+b;g=new Float32Array(12*n);for(var Fe=(r-1)/2/a,me=(r-1)/2/(i*C),be=i/(i*C),ve=0;ve<n;ve++)_e=Math.floor(ve/4)*be,xe=12*ve,g[xe]=Fe,g[xe+1]=_e+me,g[xe+2]=1-Fe,g[xe+3]=_e+me,g[xe+4]=Fe,g[xe+5]=_e+be-me,g[xe+6]=Fe,g[xe+7]=_e+be-me,g[xe+8]=1-Fe,g[xe+9]=_e+me,g[xe+10]=1-Fe,g[xe+11]=_e+be-me;U=new Float32Array(6*n);for(var he,ve=0;ve<n;ve++)he=ve%4,xe=6*ve,U[xe]=he,U[xe+1]=he,U[xe+2]=he,U[xe+3]=he,U[xe+4]=he,U[xe+5]=he;if("sobel"in te){var pe=loadShader(e,Z,e.VERTEX_SHADER),ge=loadShader(e,k,e.FRAGMENT_SHADER);I=createProgram(e,[pe,ge]),e.useProgram(I),Y=e.getAttribLocation(I,"a_position"),H=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,H),e.bufferData(e.ARRAY_BUFFER,Ee,e.STATIC_DRAW),e.enableVertexAttribArray(Y),e.vertexAttribPointer(Y,2,e.FLOAT,!1,0,0),V=e.getAttribLocation(I,"a_texCoord"),N=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,N),e.bufferData(e.ARRAY_BUFFER,Te,e.STATIC_DRAW),e.enableVertexAttribArray(V),e.vertexAttribPointer(V,2,e.FLOAT,!1,0,0),e.uniform1i(e.getUniformLocation(I,"u_patches"),1)}if("lbp"in te){var Ue=loadShader(e,Q,e.VERTEX_SHADER),Ce=loadShader(e,W,e.FRAGMENT_SHADER);S=createProgram(e,[Ue,Ce]),e.useProgram(S),X=e.getAttribLocation(S,"a_position"),O=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,O),e.bufferData(e.ARRAY_BUFFER,Ee,e.STATIC_DRAW),e.enableVertexAttribArray(X),e.vertexAttribPointer(X,2,e.FLOAT,!1,0,0),V=e.getAttribLocation(S,"a_texCoord"),M=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,M),e.bufferData(e.ARRAY_BUFFER,Te,e.STATIC_DRAW),e.enableVertexAttribArray(y),e.vertexAttribPointer(y,2,e.FLOAT,!1,0,0),e.uniform1i(e.getUniformLocation(S,"u_patches"),1)}var Le=loadShader(e,$,e.VERTEX_SHADER),De=loadShader(e,ee,e.FRAGMENT_SHADER);_=createProgram(e,[Le,De]),e.useProgram(_);var we=e.getUniformLocation(_,"u_resolutiondraw");e.uniform2f(we,m,h);var Be=e.getUniformLocation(_,"u_responses");e.uniform1i(Be,2);var Pe=loadShader(e,z,e.VERTEX_SHADER),Se=loadShader(e,j,e.FRAGMENT_SHADER);l=createProgram(e,[Pe,Se]),e.useProgram(l);var ye=e.getAttribLocation(l,"a_position");if(F=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,F),e.bufferData(e.ARRAY_BUFFER,de,e.STATIC_DRAW),e.enableVertexAttribArray(ye),e.vertexAttribPointer(ye,2,e.FLOAT,!1,0,0),x=e.getAttribLocation(l,"a_texCoord"),T=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,T),e.bufferData(e.ARRAY_BUFFER,se,e.STATIC_DRAW),e.enableVertexAttribArray(x),e.vertexAttribPointer(x,2,e.FLOAT,!1,0,0),"lbp"in te||"sobel"in te){e.activeTexture(e.TEXTURE3);var Me=e.createTexture();e.bindTexture(e.TEXTURE_2D,Me),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,a,i*f,0,e.RGBA,e.FLOAT,null),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),G=e.createFramebuffer(),e.bindFramebuffer(e.FRAMEBUFFER,G),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,Me,0)}e.activeTexture(e.TEXTURE2),E=e.createTexture(),e.bindTexture(e.TEXTURE_2D,E),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,a,i*f,0,e.RGBA,e.FLOAT,null),d=e.createFramebuffer(),e.bindFramebuffer(e.FRAMEBUFFER,d),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,E,0),e.viewport(0,0,a,i*f),v=e.createTexture(),s=e.createBuffer(),R=e.createBuffer(),A=e.createBuffer()},this.getRawResponses=function(t){te(t),e.useProgram(l),e.uniform1i(e.getUniformLocation(l,"u_patches"),1),e.uniform1i(e.getUniformLocation(l,"u_filters"),0);var r=e.getAttribLocation(l,"a_position");e.bindBuffer(e.ARRAY_BUFFER,F),e.enableVertexAttribArray(r),e.vertexAttribPointer(r,2,e.FLOAT,!1,0,0);var o=e.getAttribLocation(l,"a_texCoord");e.bindBuffer(e.ARRAY_BUFFER,T),e.enableVertexAttribArray(o),e.vertexAttribPointer(o,2,e.FLOAT,!1,0,0),e.bindFramebuffer(e.FRAMEBUFFER,d),e.viewport(0,0,a,i*f),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER),e.drawArrays(e.TRIANGLES,0,6*C);var n=oe("raw");return n},this.getSobelResponses=function(t){if(K){te(t),e.useProgram(I);var r=e.getAttribLocation(I,"a_position");e.bindBuffer(e.ARRAY_BUFFER,H),e.enableVertexAttribArray(r),e.vertexAttribPointer(r,2,e.FLOAT,!1,0,0);var o=e.getAttribLocation(I,"a_texCoord");e.bindBuffer(e.ARRAY_BUFFER,N),e.enableVertexAttribArray(o),e.vertexAttribPointer(o,2,e.FLOAT,!1,0,0),e.bindFramebuffer(e.FRAMEBUFFER,G),e.viewport(0,0,a,i*f),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER),e.drawArrays(e.TRIANGLES,0,6*C),e.useProgram(l),e.uniform1i(e.getUniformLocation(l,"u_filters"),4),e.uniform1i(e.getUniformLocation(l,"u_patches"),3);var n=e.getAttribLocation(l,"a_position");e.bindBuffer(e.ARRAY_BUFFER,F),e.enableVertexAttribArray(n),e.vertexAttribPointer(n,2,e.FLOAT,!1,0,0);var c=e.getAttribLocation(l,"a_texCoord");e.bindBuffer(e.ARRAY_BUFFER,T),e.enableVertexAttribArray(c),e.vertexAttribPointer(c,2,e.FLOAT,!1,0,0),e.bindFramebuffer(e.FRAMEBUFFER,d),e.viewport(0,0,a,i*f),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER),e.drawArrays(e.TRIANGLES,0,6*C);var u=oe("sobel");return u}},this.getLBPResponses=function(t){if(q){te(t),e.useProgram(S);var r=e.getAttribLocation(S,"a_position");e.bindBuffer(e.ARRAY_BUFFER,O),e.enableVertexAttribArray(r),e.vertexAttribPointer(r,2,e.FLOAT,!1,0,0);var o=e.getAttribLocation(S,"a_texCoord");e.bindBuffer(e.ARRAY_BUFFER,M),e.enableVertexAttribArray(o),e.vertexAttribPointer(o,2,e.FLOAT,!1,0,0),e.bindFramebuffer(e.FRAMEBUFFER,G),e.viewport(0,0,a,i*f),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER),e.drawArrays(e.TRIANGLES,0,6*C),e.useProgram(l),e.uniform1i(e.getUniformLocation(l,"u_filters"),5),e.uniform1i(e.getUniformLocation(l,"u_patches"),3);var n=e.getAttribLocation(l,"a_position");e.bindBuffer(e.ARRAY_BUFFER,F),e.enableVertexAttribArray(n),e.vertexAttribPointer(n,2,e.FLOAT,!1,0,0);var c=e.getAttribLocation(l,"a_texCoord");e.bindBuffer(e.ARRAY_BUFFER,T),e.enableVertexAttribArray(c),e.vertexAttribPointer(c,2,e.FLOAT,!1,0,0),e.bindFramebuffer(e.FRAMEBUFFER,d),e.viewport(0,0,a,i*f),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER),e.drawArrays(e.TRIANGLES,0,6*C);var u=oe("lbp");return u}};var te=function(t){for(var r=0,o=0,c=0,u=0;u<C;u++)for(var l=0;l<i;l++)for(var _=0;_<a;_++)o=4*u,c=l*a+_,r=4*(w*u+c),o<n?B[r]=t[o][c]:B[r]=0,o+1<n?B[r+1]=t[o+1][c]:B[r+1]=0,o+2<n?B[r+2]=t[o+2][c]:B[r+2]=0,o+3<n?B[r+3]=t[o+3][c]:B[r+3]=0;e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,v),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,L,D,0,e.RGBA,e.FLOAT,B),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST)},re=function(t,a){for(var i=r*o,n=new Float32Array(i*f*4),c=0;c<f;c++)for(var u=0;u<o;u++)for(var l=0;l<r;l++)4*c<t.length?n[4*(i*c+u*r+l)]=t[4*c][u*r+l]:n[4*(i*c+u*r+l)]=0,4*c+1<t.length?n[4*(i*c+u*r+l)+1]=t[4*c+1][u*r+l]:n[4*(i*c+u*r+l)+1]=0,4*c+2<t.length?n[4*(i*c+u*r+l)+2]=t[4*c+2][u*r+l]:n[4*(i*c+u*r+l)+2]=0,4*c+3<t.length?n[4*(i*c+u*r+l)+3]=t[4*c+3][u*r+l]:n[4*(i*c+u*r+l)+3]=0;e.activeTexture(a);var _=e.createTexture();e.bindTexture(e.TEXTURE_2D,_),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,r,o*f,0,e.RGBA,e.FLOAT,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST)},oe=function(t){e.useProgram(_),e.bindFramebuffer(e.FRAMEBUFFER,null),e.viewport(0,0,m,h),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER),e.bindBuffer(e.ARRAY_BUFFER,s),e.bufferData(e.ARRAY_BUFFER,p,e.STATIC_DRAW);var r=e.getAttribLocation(_,"a_position_draw");e.enableVertexAttribArray(r),e.vertexAttribPointer(r,2,e.FLOAT,!1,0,0),e.bindBuffer(e.ARRAY_BUFFER,R),e.bufferData(e.ARRAY_BUFFER,g,e.STATIC_DRAW);var o=e.getAttribLocation(_,"a_texCoord_draw");e.enableVertexAttribArray(o),e.vertexAttribPointer(o,2,e.FLOAT,!1,0,0),e.bindBuffer(e.ARRAY_BUFFER,A),e.bufferData(e.ARRAY_BUFFER,U,e.STATIC_DRAW);var a=e.getAttribLocation(_,"a_patchChoice_draw");e.enableVertexAttribArray(a),e.vertexAttribPointer(a,1,e.FLOAT,!1,0,0),e.drawArrays(e.TRIANGLES,0,6*n);var i=ne();i=ce(i),i=ie(i,n),i=ae(i,P[t]);for(var c=i.length,u=0;u<c;u++)i[u]=ue(i[u]);return i},ae=function(e,t){for(var r,o=0;o<e.length;o++){r=Math.exp(t[o]);for(var a=0;a<e[o].length;a++)e[o][a]=1/(1+(1-e[o][a])/(e[o][a]*r))}return e},ie=function(e,t){for(var r=[],o=e.length,a=o/t,i=[],n=0;n<o;n++)n%a==0&&(0!=n&&r.push(i),i=[]),i.push(e[n]);return r.push(i),r},ne=function(){var r=new Uint8Array(4*t.width*t.height);e.readPixels(0,0,t.width,t.height,e.RGBA,e.UNSIGNED_BYTE,r);return r},ce=function(e){for(var t=[],r=e.length,o=0;o<r;o+=4)t[o/4>>0]=e[o]/4294967296+e[o+1]/16777216+e[o+2]/65536+e[o+3]/256;return t},ue=function(e){for(var t=e.length,r=0,o=1,a=0;a<t;a++)r=e[a]>r?e[a]:r,o=e[a]<o?e[a]:o;var i=r-o;if(0==i)console.log("a patchresponse was monotone, causing normalization to fail. Leaving it unchanged."),e=e.map(function(){return 1});else for(var a=0;a<t;a++)e[a]=(e[a]-o)/i;return e}};!function(){var e=function(e){throw window.console&&(window.console.error?window.console.error(e):window.console.log&&window.console.log(e)),e},t=function(){return window!=window.top},r=function(e,t){if(!window.WebGLRenderingContext)return null;var r=o(e,t);return r?r:null},o=function(e,t){for(var r=["webgl","experimental-webgl"],o=null,a=0;a<r.length;++a){try{o=e.getContext(r[a],t)}catch(e){}if(o)break}return o},a=function(){t()&&(document.body.className="iframe")},i=function(e){t()&&(a(),e.width=e.clientWidth,e.height=e.clientHeight);var o=r(e);return o},n=function(t,r,o,a){var i=a||e,n=t.createShader(o);t.shaderSource(n,r),t.compileShader(n);var c=t.getShaderParameter(n,t.COMPILE_STATUS);if(!c){var u=t.getShaderInfoLog(n);return i("*** Error compiling shader '"+n+"':"+u),t.deleteShader(n),null}return n},c=function(t,r,o,a){for(var i=t.createProgram(),n=0;n<r.length;++n)t.attachShader(i,r[n]);if(o)for(var n=0;n<o.length;++n)t.bindAttribLocation(i,a?a[n]:n,o[n]);t.linkProgram(i);var c=t.getProgramParameter(i,t.LINK_STATUS);if(!c){var u=t.getProgramInfoLog(i);return e("Error in program linking:"+u),t.deleteProgram(i),null}return i},u=function(e,t,r,o){var a,i="",c=document.getElementById(t);if(!c)throw"*** Error: unknown script element"+t;if(i=c.text,!r)if("x-shader/x-vertex"==c.type)a=e.VERTEX_SHADER;else if("x-shader/x-fragment"==c.type)a=e.FRAGMENT_SHADER;else if(a!=e.VERTEX_SHADER&&a!=e.FRAGMENT_SHADER)throw"*** Error: unknown shader type";return n(e,i,r?r:a,o)};window.setupWebGL=r,window.createProgram=c,window.createShaderFromScriptElement=u,window.getWebGLContext=i,window.updateCSSIfInIFrame=a,window.loadShader=n}();